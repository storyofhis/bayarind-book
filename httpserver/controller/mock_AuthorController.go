// Code generated by mockery v2.42.1. DO NOT EDIT.

package controller

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthorController is an autogenerated mock type for the AuthorController type
type MockAuthorController struct {
	mock.Mock
}

type MockAuthorController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorController) EXPECT() *MockAuthorController_Expecter {
	return &MockAuthorController_Expecter{mock: &_m.Mock}
}

// CreateAuthor provides a mock function with given fields: ctx
func (_m *MockAuthorController) CreateAuthor(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockAuthorController_CreateAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthor'
type MockAuthorController_CreateAuthor_Call struct {
	*mock.Call
}

// CreateAuthor is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockAuthorController_Expecter) CreateAuthor(ctx interface{}) *MockAuthorController_CreateAuthor_Call {
	return &MockAuthorController_CreateAuthor_Call{Call: _e.mock.On("CreateAuthor", ctx)}
}

func (_c *MockAuthorController_CreateAuthor_Call) Run(run func(ctx *gin.Context)) *MockAuthorController_CreateAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockAuthorController_CreateAuthor_Call) Return() *MockAuthorController_CreateAuthor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthorController_CreateAuthor_Call) RunAndReturn(run func(*gin.Context)) *MockAuthorController_CreateAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthor provides a mock function with given fields: ctx
func (_m *MockAuthorController) DeleteAuthor(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockAuthorController_DeleteAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthor'
type MockAuthorController_DeleteAuthor_Call struct {
	*mock.Call
}

// DeleteAuthor is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockAuthorController_Expecter) DeleteAuthor(ctx interface{}) *MockAuthorController_DeleteAuthor_Call {
	return &MockAuthorController_DeleteAuthor_Call{Call: _e.mock.On("DeleteAuthor", ctx)}
}

func (_c *MockAuthorController_DeleteAuthor_Call) Run(run func(ctx *gin.Context)) *MockAuthorController_DeleteAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockAuthorController_DeleteAuthor_Call) Return() *MockAuthorController_DeleteAuthor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthorController_DeleteAuthor_Call) RunAndReturn(run func(*gin.Context)) *MockAuthorController_DeleteAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorById provides a mock function with given fields: ctx
func (_m *MockAuthorController) GetAuthorById(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockAuthorController_GetAuthorById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorById'
type MockAuthorController_GetAuthorById_Call struct {
	*mock.Call
}

// GetAuthorById is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockAuthorController_Expecter) GetAuthorById(ctx interface{}) *MockAuthorController_GetAuthorById_Call {
	return &MockAuthorController_GetAuthorById_Call{Call: _e.mock.On("GetAuthorById", ctx)}
}

func (_c *MockAuthorController_GetAuthorById_Call) Run(run func(ctx *gin.Context)) *MockAuthorController_GetAuthorById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockAuthorController_GetAuthorById_Call) Return() *MockAuthorController_GetAuthorById_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthorController_GetAuthorById_Call) RunAndReturn(run func(*gin.Context)) *MockAuthorController_GetAuthorById_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthors provides a mock function with given fields: ctx
func (_m *MockAuthorController) GetAuthors(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockAuthorController_GetAuthors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthors'
type MockAuthorController_GetAuthors_Call struct {
	*mock.Call
}

// GetAuthors is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockAuthorController_Expecter) GetAuthors(ctx interface{}) *MockAuthorController_GetAuthors_Call {
	return &MockAuthorController_GetAuthors_Call{Call: _e.mock.On("GetAuthors", ctx)}
}

func (_c *MockAuthorController_GetAuthors_Call) Run(run func(ctx *gin.Context)) *MockAuthorController_GetAuthors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockAuthorController_GetAuthors_Call) Return() *MockAuthorController_GetAuthors_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthorController_GetAuthors_Call) RunAndReturn(run func(*gin.Context)) *MockAuthorController_GetAuthors_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthor provides a mock function with given fields: ctx
func (_m *MockAuthorController) UpdateAuthor(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockAuthorController_UpdateAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthor'
type MockAuthorController_UpdateAuthor_Call struct {
	*mock.Call
}

// UpdateAuthor is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockAuthorController_Expecter) UpdateAuthor(ctx interface{}) *MockAuthorController_UpdateAuthor_Call {
	return &MockAuthorController_UpdateAuthor_Call{Call: _e.mock.On("UpdateAuthor", ctx)}
}

func (_c *MockAuthorController_UpdateAuthor_Call) Run(run func(ctx *gin.Context)) *MockAuthorController_UpdateAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockAuthorController_UpdateAuthor_Call) Return() *MockAuthorController_UpdateAuthor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAuthorController_UpdateAuthor_Call) RunAndReturn(run func(*gin.Context)) *MockAuthorController_UpdateAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthorController creates a new instance of MockAuthorController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorController {
	mock := &MockAuthorController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
