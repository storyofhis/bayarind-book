// Code generated by mockery v2.42.1. DO NOT EDIT.

package controller

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MockBookController is an autogenerated mock type for the BookController type
type MockBookController struct {
	mock.Mock
}

type MockBookController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookController) EXPECT() *MockBookController_Expecter {
	return &MockBookController_Expecter{mock: &_m.Mock}
}

// CreateBook provides a mock function with given fields: ctx
func (_m *MockBookController) CreateBook(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockBookController_CreateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBook'
type MockBookController_CreateBook_Call struct {
	*mock.Call
}

// CreateBook is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockBookController_Expecter) CreateBook(ctx interface{}) *MockBookController_CreateBook_Call {
	return &MockBookController_CreateBook_Call{Call: _e.mock.On("CreateBook", ctx)}
}

func (_c *MockBookController_CreateBook_Call) Run(run func(ctx *gin.Context)) *MockBookController_CreateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockBookController_CreateBook_Call) Return() *MockBookController_CreateBook_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBookController_CreateBook_Call) RunAndReturn(run func(*gin.Context)) *MockBookController_CreateBook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBook provides a mock function with given fields: ctx
func (_m *MockBookController) DeleteBook(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockBookController_DeleteBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBook'
type MockBookController_DeleteBook_Call struct {
	*mock.Call
}

// DeleteBook is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockBookController_Expecter) DeleteBook(ctx interface{}) *MockBookController_DeleteBook_Call {
	return &MockBookController_DeleteBook_Call{Call: _e.mock.On("DeleteBook", ctx)}
}

func (_c *MockBookController_DeleteBook_Call) Run(run func(ctx *gin.Context)) *MockBookController_DeleteBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockBookController_DeleteBook_Call) Return() *MockBookController_DeleteBook_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBookController_DeleteBook_Call) RunAndReturn(run func(*gin.Context)) *MockBookController_DeleteBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookById provides a mock function with given fields: ctx
func (_m *MockBookController) GetBookById(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockBookController_GetBookById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookById'
type MockBookController_GetBookById_Call struct {
	*mock.Call
}

// GetBookById is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockBookController_Expecter) GetBookById(ctx interface{}) *MockBookController_GetBookById_Call {
	return &MockBookController_GetBookById_Call{Call: _e.mock.On("GetBookById", ctx)}
}

func (_c *MockBookController_GetBookById_Call) Run(run func(ctx *gin.Context)) *MockBookController_GetBookById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockBookController_GetBookById_Call) Return() *MockBookController_GetBookById_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBookController_GetBookById_Call) RunAndReturn(run func(*gin.Context)) *MockBookController_GetBookById_Call {
	_c.Call.Return(run)
	return _c
}

// GetBooks provides a mock function with given fields: ctx
func (_m *MockBookController) GetBooks(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockBookController_GetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooks'
type MockBookController_GetBooks_Call struct {
	*mock.Call
}

// GetBooks is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockBookController_Expecter) GetBooks(ctx interface{}) *MockBookController_GetBooks_Call {
	return &MockBookController_GetBooks_Call{Call: _e.mock.On("GetBooks", ctx)}
}

func (_c *MockBookController_GetBooks_Call) Run(run func(ctx *gin.Context)) *MockBookController_GetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockBookController_GetBooks_Call) Return() *MockBookController_GetBooks_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBookController_GetBooks_Call) RunAndReturn(run func(*gin.Context)) *MockBookController_GetBooks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBook provides a mock function with given fields: ctx
func (_m *MockBookController) UpdateBook(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockBookController_UpdateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBook'
type MockBookController_UpdateBook_Call struct {
	*mock.Call
}

// UpdateBook is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockBookController_Expecter) UpdateBook(ctx interface{}) *MockBookController_UpdateBook_Call {
	return &MockBookController_UpdateBook_Call{Call: _e.mock.On("UpdateBook", ctx)}
}

func (_c *MockBookController_UpdateBook_Call) Run(run func(ctx *gin.Context)) *MockBookController_UpdateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockBookController_UpdateBook_Call) Return() *MockBookController_UpdateBook_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBookController_UpdateBook_Call) RunAndReturn(run func(*gin.Context)) *MockBookController_UpdateBook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookController creates a new instance of MockBookController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookController {
	mock := &MockBookController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
