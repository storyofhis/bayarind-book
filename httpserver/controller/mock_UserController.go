// Code generated by mockery v2.42.1. DO NOT EDIT.

package controller

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MockUserController is an autogenerated mock type for the UserController type
type MockUserController struct {
	mock.Mock
}

type MockUserController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserController) EXPECT() *MockUserController_Expecter {
	return &MockUserController_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx
func (_m *MockUserController) Login(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockUserController_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserController_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockUserController_Expecter) Login(ctx interface{}) *MockUserController_Login_Call {
	return &MockUserController_Login_Call{Call: _e.mock.On("Login", ctx)}
}

func (_c *MockUserController_Login_Call) Run(run func(ctx *gin.Context)) *MockUserController_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockUserController_Login_Call) Return() *MockUserController_Login_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserController_Login_Call) RunAndReturn(run func(*gin.Context)) *MockUserController_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx
func (_m *MockUserController) Register(ctx *gin.Context) {
	_m.Called(ctx)
}

// MockUserController_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserController_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockUserController_Expecter) Register(ctx interface{}) *MockUserController_Register_Call {
	return &MockUserController_Register_Call{Call: _e.mock.On("Register", ctx)}
}

func (_c *MockUserController_Register_Call) Run(run func(ctx *gin.Context)) *MockUserController_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *MockUserController_Register_Call) Return() *MockUserController_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUserController_Register_Call) RunAndReturn(run func(*gin.Context)) *MockUserController_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserController creates a new instance of MockUserController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserController {
	mock := &MockUserController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
