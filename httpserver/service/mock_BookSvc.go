// Code generated by mockery v2.42.1. DO NOT EDIT.

package service

import (
	context "context"

	params "github.com/storyofhis/books-management/httpserver/controller/params"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"

	views "github.com/storyofhis/books-management/httpserver/controller/views"
)

// MockBookSvc is an autogenerated mock type for the BookSvc type
type MockBookSvc struct {
	mock.Mock
}

type MockBookSvc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookSvc) EXPECT() *MockBookSvc_Expecter {
	return &MockBookSvc_Expecter{mock: &_m.Mock}
}

// CreateBook provides a mock function with given fields: ctx, book, id
func (_m *MockBookSvc) CreateBook(ctx context.Context, book *params.CreateBook, id uuid.UUID) *views.Response {
	ret := _m.Called(ctx, book, id)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context, *params.CreateBook, uuid.UUID) *views.Response); ok {
		r0 = rf(ctx, book, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockBookSvc_CreateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBook'
type MockBookSvc_CreateBook_Call struct {
	*mock.Call
}

// CreateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - book *params.CreateBook
//   - id uuid.UUID
func (_e *MockBookSvc_Expecter) CreateBook(ctx interface{}, book interface{}, id interface{}) *MockBookSvc_CreateBook_Call {
	return &MockBookSvc_CreateBook_Call{Call: _e.mock.On("CreateBook", ctx, book, id)}
}

func (_c *MockBookSvc_CreateBook_Call) Run(run func(ctx context.Context, book *params.CreateBook, id uuid.UUID)) *MockBookSvc_CreateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*params.CreateBook), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBookSvc_CreateBook_Call) Return(_a0 *views.Response) *MockBookSvc_CreateBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookSvc_CreateBook_Call) RunAndReturn(run func(context.Context, *params.CreateBook, uuid.UUID) *views.Response) *MockBookSvc_CreateBook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBook provides a mock function with given fields: ctx, id
func (_m *MockBookSvc) DeleteBook(ctx context.Context, id uuid.UUID) *views.Response {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *views.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockBookSvc_DeleteBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBook'
type MockBookSvc_DeleteBook_Call struct {
	*mock.Call
}

// DeleteBook is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBookSvc_Expecter) DeleteBook(ctx interface{}, id interface{}) *MockBookSvc_DeleteBook_Call {
	return &MockBookSvc_DeleteBook_Call{Call: _e.mock.On("DeleteBook", ctx, id)}
}

func (_c *MockBookSvc_DeleteBook_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBookSvc_DeleteBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBookSvc_DeleteBook_Call) Return(_a0 *views.Response) *MockBookSvc_DeleteBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookSvc_DeleteBook_Call) RunAndReturn(run func(context.Context, uuid.UUID) *views.Response) *MockBookSvc_DeleteBook_Call {
	_c.Call.Return(run)
	return _c
}

// GetBookById provides a mock function with given fields: ctx, id
func (_m *MockBookSvc) GetBookById(ctx context.Context, id uuid.UUID) *views.Response {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBookById")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *views.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockBookSvc_GetBookById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookById'
type MockBookSvc_GetBookById_Call struct {
	*mock.Call
}

// GetBookById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBookSvc_Expecter) GetBookById(ctx interface{}, id interface{}) *MockBookSvc_GetBookById_Call {
	return &MockBookSvc_GetBookById_Call{Call: _e.mock.On("GetBookById", ctx, id)}
}

func (_c *MockBookSvc_GetBookById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBookSvc_GetBookById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBookSvc_GetBookById_Call) Return(_a0 *views.Response) *MockBookSvc_GetBookById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookSvc_GetBookById_Call) RunAndReturn(run func(context.Context, uuid.UUID) *views.Response) *MockBookSvc_GetBookById_Call {
	_c.Call.Return(run)
	return _c
}

// GetBooks provides a mock function with given fields: ctx
func (_m *MockBookSvc) GetBooks(ctx context.Context) *views.Response {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBooks")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context) *views.Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockBookSvc_GetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooks'
type MockBookSvc_GetBooks_Call struct {
	*mock.Call
}

// GetBooks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBookSvc_Expecter) GetBooks(ctx interface{}) *MockBookSvc_GetBooks_Call {
	return &MockBookSvc_GetBooks_Call{Call: _e.mock.On("GetBooks", ctx)}
}

func (_c *MockBookSvc_GetBooks_Call) Run(run func(ctx context.Context)) *MockBookSvc_GetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBookSvc_GetBooks_Call) Return(_a0 *views.Response) *MockBookSvc_GetBooks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookSvc_GetBooks_Call) RunAndReturn(run func(context.Context) *views.Response) *MockBookSvc_GetBooks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBook provides a mock function with given fields: ctx, book, id
func (_m *MockBookSvc) UpdateBook(ctx context.Context, book *params.UpdateBook, id uuid.UUID) *views.Response {
	ret := _m.Called(ctx, book, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context, *params.UpdateBook, uuid.UUID) *views.Response); ok {
		r0 = rf(ctx, book, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockBookSvc_UpdateBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBook'
type MockBookSvc_UpdateBook_Call struct {
	*mock.Call
}

// UpdateBook is a helper method to define mock.On call
//   - ctx context.Context
//   - book *params.UpdateBook
//   - id uuid.UUID
func (_e *MockBookSvc_Expecter) UpdateBook(ctx interface{}, book interface{}, id interface{}) *MockBookSvc_UpdateBook_Call {
	return &MockBookSvc_UpdateBook_Call{Call: _e.mock.On("UpdateBook", ctx, book, id)}
}

func (_c *MockBookSvc_UpdateBook_Call) Run(run func(ctx context.Context, book *params.UpdateBook, id uuid.UUID)) *MockBookSvc_UpdateBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*params.UpdateBook), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBookSvc_UpdateBook_Call) Return(_a0 *views.Response) *MockBookSvc_UpdateBook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookSvc_UpdateBook_Call) RunAndReturn(run func(context.Context, *params.UpdateBook, uuid.UUID) *views.Response) *MockBookSvc_UpdateBook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookSvc creates a new instance of MockBookSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookSvc {
	mock := &MockBookSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
