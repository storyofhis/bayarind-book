// Code generated by mockery v2.42.1. DO NOT EDIT.

package service

import (
	context "context"

	params "github.com/storyofhis/books-management/httpserver/controller/params"
	mock "github.com/stretchr/testify/mock"

	views "github.com/storyofhis/books-management/httpserver/controller/views"
)

// MockUserSvc is an autogenerated mock type for the UserSvc type
type MockUserSvc struct {
	mock.Mock
}

type MockUserSvc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserSvc) EXPECT() *MockUserSvc_Expecter {
	return &MockUserSvc_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, user
func (_m *MockUserSvc) Login(ctx context.Context, user *params.Login) *views.Response {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context, *params.Login) *views.Response); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockUserSvc_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserSvc_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - user *params.Login
func (_e *MockUserSvc_Expecter) Login(ctx interface{}, user interface{}) *MockUserSvc_Login_Call {
	return &MockUserSvc_Login_Call{Call: _e.mock.On("Login", ctx, user)}
}

func (_c *MockUserSvc_Login_Call) Run(run func(ctx context.Context, user *params.Login)) *MockUserSvc_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*params.Login))
	})
	return _c
}

func (_c *MockUserSvc_Login_Call) Return(_a0 *views.Response) *MockUserSvc_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserSvc_Login_Call) RunAndReturn(run func(context.Context, *params.Login) *views.Response) *MockUserSvc_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, user
func (_m *MockUserSvc) Register(ctx context.Context, user *params.Register) *views.Response {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context, *params.Register) *views.Response); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockUserSvc_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserSvc_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - user *params.Register
func (_e *MockUserSvc_Expecter) Register(ctx interface{}, user interface{}) *MockUserSvc_Register_Call {
	return &MockUserSvc_Register_Call{Call: _e.mock.On("Register", ctx, user)}
}

func (_c *MockUserSvc_Register_Call) Run(run func(ctx context.Context, user *params.Register)) *MockUserSvc_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*params.Register))
	})
	return _c
}

func (_c *MockUserSvc_Register_Call) Return(_a0 *views.Response) *MockUserSvc_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserSvc_Register_Call) RunAndReturn(run func(context.Context, *params.Register) *views.Response) *MockUserSvc_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserSvc creates a new instance of MockUserSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserSvc {
	mock := &MockUserSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
