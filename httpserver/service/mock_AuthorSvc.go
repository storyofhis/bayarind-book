// Code generated by mockery v2.42.1. DO NOT EDIT.

package service

import (
	context "context"

	params "github.com/storyofhis/books-management/httpserver/controller/params"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"

	views "github.com/storyofhis/books-management/httpserver/controller/views"
)

// MockAuthorSvc is an autogenerated mock type for the AuthorSvc type
type MockAuthorSvc struct {
	mock.Mock
}

type MockAuthorSvc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorSvc) EXPECT() *MockAuthorSvc_Expecter {
	return &MockAuthorSvc_Expecter{mock: &_m.Mock}
}

// CreateAuthor provides a mock function with given fields: ctx, author, id
func (_m *MockAuthorSvc) CreateAuthor(ctx context.Context, author *params.CreateAuthors, id uuid.UUID) *views.Response {
	ret := _m.Called(ctx, author, id)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthor")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context, *params.CreateAuthors, uuid.UUID) *views.Response); ok {
		r0 = rf(ctx, author, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockAuthorSvc_CreateAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthor'
type MockAuthorSvc_CreateAuthor_Call struct {
	*mock.Call
}

// CreateAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - author *params.CreateAuthors
//   - id uuid.UUID
func (_e *MockAuthorSvc_Expecter) CreateAuthor(ctx interface{}, author interface{}, id interface{}) *MockAuthorSvc_CreateAuthor_Call {
	return &MockAuthorSvc_CreateAuthor_Call{Call: _e.mock.On("CreateAuthor", ctx, author, id)}
}

func (_c *MockAuthorSvc_CreateAuthor_Call) Run(run func(ctx context.Context, author *params.CreateAuthors, id uuid.UUID)) *MockAuthorSvc_CreateAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*params.CreateAuthors), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthorSvc_CreateAuthor_Call) Return(_a0 *views.Response) *MockAuthorSvc_CreateAuthor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorSvc_CreateAuthor_Call) RunAndReturn(run func(context.Context, *params.CreateAuthors, uuid.UUID) *views.Response) *MockAuthorSvc_CreateAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthor provides a mock function with given fields: ctx, id
func (_m *MockAuthorSvc) DeleteAuthor(ctx context.Context, id uuid.UUID) *views.Response {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthor")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *views.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockAuthorSvc_DeleteAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthor'
type MockAuthorSvc_DeleteAuthor_Call struct {
	*mock.Call
}

// DeleteAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockAuthorSvc_Expecter) DeleteAuthor(ctx interface{}, id interface{}) *MockAuthorSvc_DeleteAuthor_Call {
	return &MockAuthorSvc_DeleteAuthor_Call{Call: _e.mock.On("DeleteAuthor", ctx, id)}
}

func (_c *MockAuthorSvc_DeleteAuthor_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAuthorSvc_DeleteAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthorSvc_DeleteAuthor_Call) Return(_a0 *views.Response) *MockAuthorSvc_DeleteAuthor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorSvc_DeleteAuthor_Call) RunAndReturn(run func(context.Context, uuid.UUID) *views.Response) *MockAuthorSvc_DeleteAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorById provides a mock function with given fields: ctx, id
func (_m *MockAuthorSvc) GetAuthorById(ctx context.Context, id uuid.UUID) *views.Response {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorById")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *views.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockAuthorSvc_GetAuthorById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorById'
type MockAuthorSvc_GetAuthorById_Call struct {
	*mock.Call
}

// GetAuthorById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockAuthorSvc_Expecter) GetAuthorById(ctx interface{}, id interface{}) *MockAuthorSvc_GetAuthorById_Call {
	return &MockAuthorSvc_GetAuthorById_Call{Call: _e.mock.On("GetAuthorById", ctx, id)}
}

func (_c *MockAuthorSvc_GetAuthorById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAuthorSvc_GetAuthorById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthorSvc_GetAuthorById_Call) Return(_a0 *views.Response) *MockAuthorSvc_GetAuthorById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorSvc_GetAuthorById_Call) RunAndReturn(run func(context.Context, uuid.UUID) *views.Response) *MockAuthorSvc_GetAuthorById_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthors provides a mock function with given fields: ctx
func (_m *MockAuthorSvc) GetAuthors(ctx context.Context) *views.Response {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthors")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context) *views.Response); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockAuthorSvc_GetAuthors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthors'
type MockAuthorSvc_GetAuthors_Call struct {
	*mock.Call
}

// GetAuthors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthorSvc_Expecter) GetAuthors(ctx interface{}) *MockAuthorSvc_GetAuthors_Call {
	return &MockAuthorSvc_GetAuthors_Call{Call: _e.mock.On("GetAuthors", ctx)}
}

func (_c *MockAuthorSvc_GetAuthors_Call) Run(run func(ctx context.Context)) *MockAuthorSvc_GetAuthors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthorSvc_GetAuthors_Call) Return(_a0 *views.Response) *MockAuthorSvc_GetAuthors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorSvc_GetAuthors_Call) RunAndReturn(run func(context.Context) *views.Response) *MockAuthorSvc_GetAuthors_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthor provides a mock function with given fields: ctx, author, id
func (_m *MockAuthorSvc) UpdateAuthor(ctx context.Context, author *params.UpdateAuthors, id uuid.UUID) *views.Response {
	ret := _m.Called(ctx, author, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthor")
	}

	var r0 *views.Response
	if rf, ok := ret.Get(0).(func(context.Context, *params.UpdateAuthors, uuid.UUID) *views.Response); ok {
		r0 = rf(ctx, author, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.Response)
		}
	}

	return r0
}

// MockAuthorSvc_UpdateAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthor'
type MockAuthorSvc_UpdateAuthor_Call struct {
	*mock.Call
}

// UpdateAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - author *params.UpdateAuthors
//   - id uuid.UUID
func (_e *MockAuthorSvc_Expecter) UpdateAuthor(ctx interface{}, author interface{}, id interface{}) *MockAuthorSvc_UpdateAuthor_Call {
	return &MockAuthorSvc_UpdateAuthor_Call{Call: _e.mock.On("UpdateAuthor", ctx, author, id)}
}

func (_c *MockAuthorSvc_UpdateAuthor_Call) Run(run func(ctx context.Context, author *params.UpdateAuthors, id uuid.UUID)) *MockAuthorSvc_UpdateAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*params.UpdateAuthors), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthorSvc_UpdateAuthor_Call) Return(_a0 *views.Response) *MockAuthorSvc_UpdateAuthor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorSvc_UpdateAuthor_Call) RunAndReturn(run func(context.Context, *params.UpdateAuthors, uuid.UUID) *views.Response) *MockAuthorSvc_UpdateAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthorSvc creates a new instance of MockAuthorSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorSvc {
	mock := &MockAuthorSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
