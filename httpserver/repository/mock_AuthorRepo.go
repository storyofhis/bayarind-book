// Code generated by mockery v2.42.1. DO NOT EDIT.

package repository

import (
	context "context"

	models "github.com/storyofhis/books-management/httpserver/repository/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockAuthorRepo is an autogenerated mock type for the AuthorRepo type
type MockAuthorRepo struct {
	mock.Mock
}

type MockAuthorRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthorRepo) EXPECT() *MockAuthorRepo_Expecter {
	return &MockAuthorRepo_Expecter{mock: &_m.Mock}
}

// CreateAuthor provides a mock function with given fields: ctx, author
func (_m *MockAuthorRepo) CreateAuthor(ctx context.Context, author *models.Author) error {
	ret := _m.Called(ctx, author)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Author) error); ok {
		r0 = rf(ctx, author)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthorRepo_CreateAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthor'
type MockAuthorRepo_CreateAuthor_Call struct {
	*mock.Call
}

// CreateAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - author *models.Author
func (_e *MockAuthorRepo_Expecter) CreateAuthor(ctx interface{}, author interface{}) *MockAuthorRepo_CreateAuthor_Call {
	return &MockAuthorRepo_CreateAuthor_Call{Call: _e.mock.On("CreateAuthor", ctx, author)}
}

func (_c *MockAuthorRepo_CreateAuthor_Call) Run(run func(ctx context.Context, author *models.Author)) *MockAuthorRepo_CreateAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Author))
	})
	return _c
}

func (_c *MockAuthorRepo_CreateAuthor_Call) Return(_a0 error) *MockAuthorRepo_CreateAuthor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorRepo_CreateAuthor_Call) RunAndReturn(run func(context.Context, *models.Author) error) *MockAuthorRepo_CreateAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAuthor provides a mock function with given fields: ctx, id
func (_m *MockAuthorRepo) DeleteAuthor(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthorRepo_DeleteAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAuthor'
type MockAuthorRepo_DeleteAuthor_Call struct {
	*mock.Call
}

// DeleteAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockAuthorRepo_Expecter) DeleteAuthor(ctx interface{}, id interface{}) *MockAuthorRepo_DeleteAuthor_Call {
	return &MockAuthorRepo_DeleteAuthor_Call{Call: _e.mock.On("DeleteAuthor", ctx, id)}
}

func (_c *MockAuthorRepo_DeleteAuthor_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAuthorRepo_DeleteAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthorRepo_DeleteAuthor_Call) Return(_a0 error) *MockAuthorRepo_DeleteAuthor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorRepo_DeleteAuthor_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockAuthorRepo_DeleteAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorById provides a mock function with given fields: ctx, id
func (_m *MockAuthorRepo) GetAuthorById(ctx context.Context, id uuid.UUID) (*models.Author, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorById")
	}

	var r0 *models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Author, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Author); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthorRepo_GetAuthorById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorById'
type MockAuthorRepo_GetAuthorById_Call struct {
	*mock.Call
}

// GetAuthorById is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockAuthorRepo_Expecter) GetAuthorById(ctx interface{}, id interface{}) *MockAuthorRepo_GetAuthorById_Call {
	return &MockAuthorRepo_GetAuthorById_Call{Call: _e.mock.On("GetAuthorById", ctx, id)}
}

func (_c *MockAuthorRepo_GetAuthorById_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAuthorRepo_GetAuthorById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthorRepo_GetAuthorById_Call) Return(_a0 *models.Author, _a1 error) *MockAuthorRepo_GetAuthorById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthorRepo_GetAuthorById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Author, error)) *MockAuthorRepo_GetAuthorById_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthors provides a mock function with given fields: ctx
func (_m *MockAuthorRepo) GetAuthors(ctx context.Context) ([]*models.Author, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthors")
	}

	var r0 []*models.Author
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Author, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Author); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Author)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthorRepo_GetAuthors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthors'
type MockAuthorRepo_GetAuthors_Call struct {
	*mock.Call
}

// GetAuthors is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthorRepo_Expecter) GetAuthors(ctx interface{}) *MockAuthorRepo_GetAuthors_Call {
	return &MockAuthorRepo_GetAuthors_Call{Call: _e.mock.On("GetAuthors", ctx)}
}

func (_c *MockAuthorRepo_GetAuthors_Call) Run(run func(ctx context.Context)) *MockAuthorRepo_GetAuthors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthorRepo_GetAuthors_Call) Return(_a0 []*models.Author, _a1 error) *MockAuthorRepo_GetAuthors_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthorRepo_GetAuthors_Call) RunAndReturn(run func(context.Context) ([]*models.Author, error)) *MockAuthorRepo_GetAuthors_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAuthor provides a mock function with given fields: ctx, author, id
func (_m *MockAuthorRepo) UpdateAuthor(ctx context.Context, author *models.Author, id uuid.UUID) error {
	ret := _m.Called(ctx, author, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Author, uuid.UUID) error); ok {
		r0 = rf(ctx, author, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthorRepo_UpdateAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAuthor'
type MockAuthorRepo_UpdateAuthor_Call struct {
	*mock.Call
}

// UpdateAuthor is a helper method to define mock.On call
//   - ctx context.Context
//   - author *models.Author
//   - id uuid.UUID
func (_e *MockAuthorRepo_Expecter) UpdateAuthor(ctx interface{}, author interface{}, id interface{}) *MockAuthorRepo_UpdateAuthor_Call {
	return &MockAuthorRepo_UpdateAuthor_Call{Call: _e.mock.On("UpdateAuthor", ctx, author, id)}
}

func (_c *MockAuthorRepo_UpdateAuthor_Call) Run(run func(ctx context.Context, author *models.Author, id uuid.UUID)) *MockAuthorRepo_UpdateAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Author), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockAuthorRepo_UpdateAuthor_Call) Return(_a0 error) *MockAuthorRepo_UpdateAuthor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthorRepo_UpdateAuthor_Call) RunAndReturn(run func(context.Context, *models.Author, uuid.UUID) error) *MockAuthorRepo_UpdateAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthorRepo creates a new instance of MockAuthorRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthorRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthorRepo {
	mock := &MockAuthorRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
